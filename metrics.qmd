---
title: "Classification"
---

# CLASIFICACION SIN PIPE

## 1. Import libraries

```{python}
from sklearn.datasets import load_breast_cancer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, ConfusionMatrixDisplay
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

```

## 2. Cargar el Dataset

```{python}
data = load_breast_cancer()
data
```

```{python}
# data
X = data.data #features
y = data.target #etiqueta
```
## 3. Split data

```{python}

X_train, X_test, y_train, y_test = train_test_split(
    X,y,test_size=0.2,random_state=42,stratify=y
)

# print("X_TRAIN")
# print(X_train)
# print("X_TEST")
# print(X_test)

# print("Y TRAIN")
# print(y_train)
# print("Y_TEST")
# print(y_test)
```

## 4. Entrenar el model

```{python}
model = LogisticRegression(max_iter=100000)
model.fit(X_train,y_train)
```

## 5. Predict

```{python}
y_pred = model.predict(X_test)
```

## 6. Evaluacion


```{python}

accuracy = accuracy_score(y_test,y_pred)
precision = precision_score(y_test,y_pred)
recall = recall_score(y_test,y_pred)
f1 = f1_score(y_test,y_pred)

print(f"accuracy: {accuracy}")
print(f"precision: {precision}")
print(f"recall: {recall}")
print(f"f1: {f1}")

```

## Matriz de confusi√≥n

```{python}
ConfusionMatrixDisplay.from_predictions(y_test,y_pred)
```



# CLASIFICACION CON PIPE

## 2. Cargar el Dataset

```{python}
data = load_breast_cancer()
data
```

```{python}
# data
X = data.data #features
y = data.target #etiqueta
```
## 3. Split data

```{python}

X_train, X_test, y_train, y_test = train_test_split(
    X,y,test_size=0.2,random_state=42,stratify=y
)
```

## Pipeline

```{python}

pipe = Pipeline([
    ("escalado",StandardScaler()),
    ("logreg",LogisticRegression(max_iter=100000))
])

```

## Train modelo

```{python}
pipe.fit(X_train,y_train)
```

## Test o prediction

```{python}
y_pred_pipe = pipe.predict(X_test)
```


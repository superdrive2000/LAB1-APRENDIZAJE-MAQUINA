---
title: "Text Clasification"
author: "Jesus Quinga"  
format: "html"
code-fold: false    
#format:
#    html:
#        embed-resources: true

#AQUI PONER EL PATH HACIA SU AMBIENTE VIRTUAL
execute:
  python: C:/Users/Lenovo i5/Documents/MAESTRIA IA YACHAY TECH/APRENDIZAJE DE MAQUINA/SEMANA 1/.venv/Scripts/python.exe
---

# Importar liberrías




```{python}
import pandas as pd
from sklearn.datasets import fetch_20newsgroups

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
# vectorizacion textual

from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_extraction.text import CountVectorizer
import nltk
from nltk.corpus import stopwords

nltk.download('stopwords') # necessary for removal of stop words
nltk.download('wordnet') # necessary for lemmatization


```

# Cargar el dataset


```{python}

categorias = ['comp.graphics','comp.sys.mac.hardware','rec.sport.baseball','talk.politics.misc']

newsgroups = fetch_20newsgroups(subset = 'train',categories=categorias,remove=('headers','footers','quotes'))
print(newsgroups.target_names)
```

# Features y target


```{python}
X_text = newsgroups.data  #features
y = newsgroups.target   #target
y

```

# Train test


```{python}

X_train,X_test,y_train,y_test = train_test_split(X_text,y,test_size=0.2,random_state=42,stratify=y)
```


# Vectorizacion de text

```{python}

stopwords = stopwords.words('english')
vectorizer = CountVectorizer(stop_words=stopwords) #TfidfTransformer()
#vectorizer = TfidfTransformer(stop_words=stopwords)
```

# Definición del Pipeline

```{python}
model = MultinomialNB()
```


```{python}
pipeline = Pipeline(
    [
        ('vectorizacion',vectorizer),
        ('classifier',model)
    ]

)
```

# Fit del modelo


```{python}
pipeline.fit(X_train,y_train)
```

# Predicción


```{python}|
y_pred = pipeline.predict(X_test)

```

# Reporte de clasificación


```{python}
y_pred = pipeline.predict(X_test)

print("Reporte de classificacion\n",classification_report(y_test,y_pred, target_names=newsgroups.target_names))
```

# Matriz de confusion

```{python}
ConfusionMatrixDisplay(confusion_matrix(y_test,y_pred),display_labels=newsgroups.target_names).plot()

```
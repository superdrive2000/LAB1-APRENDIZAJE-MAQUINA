---
title: "Knn"
author: "Jesus Quinga"  
format: "html"
code-fold: false    
#format:
#    html:
#        embed-resources: true

#AQUI PONER EL PATH HACIA SU AMBIENTE VIRTUAL
execute:
  python: C:/Users/Lenovo i5/Documents/MAESTRIA IA YACHAY TECH/APRENDIZAJE DE MAQUINA/SEMANA 1/.venv/Scripts/python.exe
---

# Importar librerias


```{python}

import pandas as pd

from sklearn.datasets import fetch_openml

from sklearn.model_selection import GridSearchCV, cross_val_score

from sklearn.impute import SimpleImputer

from sklearn.preprocessing import OneHotEncoder, StandardScaler

from sklearn.compose import ColumnTransformer

from sklearn.pipeline import Pipeline

from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import classification_report, confusion_matrix

from sklearn.model_selection import train_test_split

from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay


```

# Cargar dtaset


```{python}
df = fetch_openml('titanic',version=1, as_frame=True)['frame']
df
```

# Info dataset

```{python}
df.info()
```

#  Filtrado de columnas relevantes


```{python}
df = df[['pclass','survived','sex','age','sibsp','parch','ticket','embarked']]
df
```

# Eliminacion de datos faltantes y coversion del target

```{python}
df = df[df['survived'].notna()]
df['survived'] = df['survived'].astype(int)

```

# Features  y target

```{python}
X = df.drop(columns = 'survived') #feature
y = df['survived'] # target
```

# Identificaci贸n de features

```{python}
cat_cols = ['sex','embarked'] #categorical nominal
num_cols = ['age','sibsp','parch', 'pclass']
```

# Preprocesamiento



## Generaci贸n de pipeline por tipo de variable


```{python}
categorical_pipeline = Pipeline([
    ('imputaci贸n_cat',SimpleImputer(strategy='most_frequent')),
    ('encodage_cat',OneHotEncoder(handle_unknown='ignore'))
])

numerical_pipeline = Pipeline([
    ('imputacion_num',SimpleImputer(strategy='mean')),
    ('escalamiento',StandardScaler())
])
```

## Aplicar ColumnTarnsformer


```{python}
preprocessor = ColumnTransformer([
    ('cat',categorical_pipeline,cat_cols),
    ('num', numerical_pipeline,num_cols)
])
```

# Pipeline

```{python}
pipeline = Pipeline([
    ('preprocesor',preprocessor),
    ('clasificador',KNeighborsClassifier())
])

```


# Train split

```{python}
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,stratify=y,random_state=42)
```

# Gridsearch

## Definir el param_grid

```{python}
param_grid = {
    'clasificador__n_neighbors': list (range(1,51)),
    'clasificador__weights':['uniform','distance'],
    'clasificador__metric': ['minkowski','euclidean','manhattan']
}
```


## Definir el gridsearch
```{python}
grid = GridSearchCV(pipeline,param_grid,cv=5,scoring='accuracy')
grid.fit(X_train,y_train)
```

## Obtener el mejor modelo


```{python}
best_model = grid.best_estimator_
```


# Presentar el mejor modelo

```{python}
print('Mejores parametros: \n',grid.best_params_)
```
# Evaluaci贸n


```{python}
y_pred = best_model.predict(X_test)
```

# Reporte del modelo


```{python}
print('REPORTE DE CLASIFICACION: \n',classification_report(y_test,y_pred))

ConfusionMatrixDisplay(confusion_matrix(y_test,y_pred)).plot()
```

